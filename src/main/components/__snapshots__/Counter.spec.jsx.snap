// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders initial state and plus and minus 1`] = `
<IntlProvider
  locale="en"
>
  <Connect(Counter)
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      }
    }
  >
    <Counter
      counter={0}
      onDecrement={[Function]}
      onIncrement={[Function]}
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <div>
        <label
          htmlFor="plus"
          id="counter"
        >
          <FormattedMessage
            defaultMessage="Count: {count}"
            id="app.home.count"
            values={
              Object {
                "count": 0,
              }
            }
          >
            <span>
              Count: 
            </span>
          </FormattedMessage>
        </label>
        <button
          id="plus"
          onClick={[Function]}
        >
          -
        </button>
        <button
          id="minus"
          onClick={[Function]}
        >
          +
        </button>
      </div>
    </Counter>
  </Connect(Counter)>
</IntlProvider>
`;

exports[`renders initial state and plus and minus 2`] = `
<IntlProvider
  locale="en"
>
  <Connect(Counter)
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      }
    }
  >
    <Counter
      counter={-1}
      onDecrement={[Function]}
      onIncrement={[Function]}
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <div>
        <label
          htmlFor="plus"
          id="counter"
        >
          <FormattedMessage
            defaultMessage="Count: {count}"
            id="app.home.count"
            values={
              Object {
                "count": -1,
              }
            }
          >
            <span>
              Count: -1
            </span>
          </FormattedMessage>
        </label>
        <button
          id="plus"
          onClick={[Function]}
        >
          -
        </button>
        <button
          id="minus"
          onClick={[Function]}
        >
          +
        </button>
      </div>
    </Counter>
  </Connect(Counter)>
</IntlProvider>
`;

exports[`renders initial state and plus and minus 3`] = `
<IntlProvider
  locale="en"
>
  <Connect(Counter)
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      }
    }
  >
    <Counter
      counter={0}
      onDecrement={[Function]}
      onIncrement={[Function]}
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <div>
        <label
          htmlFor="plus"
          id="counter"
        >
          <FormattedMessage
            defaultMessage="Count: {count}"
            id="app.home.count"
            values={
              Object {
                "count": 0,
              }
            }
          >
            <span>
              Count: 
            </span>
          </FormattedMessage>
        </label>
        <button
          id="plus"
          onClick={[Function]}
        >
          -
        </button>
        <button
          id="minus"
          onClick={[Function]}
        >
          +
        </button>
      </div>
    </Counter>
  </Connect(Counter)>
</IntlProvider>
`;
